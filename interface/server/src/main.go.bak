/*
 *
 * Copyright 2015 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package main

import (
	pb "./protocol"
	"log"
	"net"
	"os/exec"
	"fmt"
	"time"

	"golang.org/x/net/context"
	"google.golang.org/grpc"
	"google.golang.org/grpc/reflection"
)

const (
	port = ":9090"
)

type server struct{}

var lock bool

type Event struct {
  Timeval1 int64
  Timeval2 int64
  Typo int16
  Code int16
  Value int32
}

func (s *server) Touch(ctx context.Context, in *pb.Request) (*pb.Reply, error) {
	for ;lock == true; {
		time.Sleep(100)
	}
	lock = true
	points := []*pb.Reply_Point{}
	command := make([]byte, 0, 1024)
	for i := 0; i < len(in.Points); i++ {
		if string(command) != "" {
			command = append(command, '\n')
		}
		var c = make([]byte, 0, 1024)
		// タップ
		if in.Points[i].Type == pb.Request_Point_Touch {
			c = append(c, "sendevent /dev/input/event1 3 57 0\n"...)
			c = append(c, "sendevent /dev/input/event1 3 48 0\n"...)
			c = append(c, "sendevent /dev/input/event1 3 58 129\n"...)
		}
		// 座標移動
		if in.Points[i].Type == pb.Request_Point_Touch ||
		   in.Points[i].Type == pb.Request_Point_Move {
			// 縦横は画面回転前に準拠
			s := fmt.Sprintf("sendevent /dev/input/event1 3 53 %d\n", int((360 - in.Points[i].Y) / 360 * 32767))
			c = append(c, s...)
			s = fmt.Sprintf("sendevent /dev/input/event1 3 54 %d\n", int(in.Points[i].X / 640 * 32767))
			c = append(c, s...)
		}
		// リリース
		if in.Points[i].Type == pb.Request_Point_End {
			c = append(c, "sendevent /dev/input/event1 3 58 0\n"...)
			c = append(c, "sendevent /dev/input/event1 3 57 4294967295\n"...)
		}
		// 終了
		c = append(c, "sendevent /dev/input/event1 0 0 0"...)

		command  = append(command, c...)

		point := pb.Reply_Point{
			Type: pb.Reply_Point_Type(in.Points[i].Type),
			X: in.Points[i].X * 3.0,
			Y: in.Points[i].Y * 3.0,
		        Str: string(c)}
		points = append(points, &point)
	}
	start := time.Now();
	err := exec.Command("adb", "shell", string(command)).Run()
	str := ""
	if err != nil {
		str = err.Error()
	} else {
		str = fmt.Sprintf("%f", time.Now().Sub(start).Seconds());
	}
	lock = false
	return &pb.Reply{Points: points, Str: str}, nil
}

func main() {
	lis, err := net.Listen("tcp", port)
	if err != nil {
		log.Fatalf("failed to listen: %v", err)
	}
	s := grpc.NewServer()
	pb.RegisterInterfaceServer(s, &server{})
	// Register reflection service on gRPC server.
	reflection.Register(s)
	if err := s.Serve(lis); err != nil {
		log.Fatalf("failed to serve: %v", err)
	}
}
