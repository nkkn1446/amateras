// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protocol.proto

package Protocol

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TouchRequest struct {
	X                    float64  `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y                    float64  `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TouchRequest) Reset()         { *m = TouchRequest{} }
func (m *TouchRequest) String() string { return proto.CompactTextString(m) }
func (*TouchRequest) ProtoMessage()    {}
func (*TouchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{0}
}

func (m *TouchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TouchRequest.Unmarshal(m, b)
}
func (m *TouchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TouchRequest.Marshal(b, m, deterministic)
}
func (m *TouchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TouchRequest.Merge(m, src)
}
func (m *TouchRequest) XXX_Size() int {
	return xxx_messageInfo_TouchRequest.Size(m)
}
func (m *TouchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TouchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TouchRequest proto.InternalMessageInfo

func (m *TouchRequest) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *TouchRequest) GetY() float64 {
	if m != nil {
		return m.Y
	}
	return 0
}

type TouchReply struct {
	X                    float64  `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y                    float64  `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TouchReply) Reset()         { *m = TouchReply{} }
func (m *TouchReply) String() string { return proto.CompactTextString(m) }
func (*TouchReply) ProtoMessage()    {}
func (*TouchReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{1}
}

func (m *TouchReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TouchReply.Unmarshal(m, b)
}
func (m *TouchReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TouchReply.Marshal(b, m, deterministic)
}
func (m *TouchReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TouchReply.Merge(m, src)
}
func (m *TouchReply) XXX_Size() int {
	return xxx_messageInfo_TouchReply.Size(m)
}
func (m *TouchReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TouchReply.DiscardUnknown(m)
}

var xxx_messageInfo_TouchReply proto.InternalMessageInfo

func (m *TouchReply) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *TouchReply) GetY() float64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func init() {
	proto.RegisterType((*TouchRequest)(nil), "Protocol.TouchRequest")
	proto.RegisterType((*TouchReply)(nil), "Protocol.TouchReply")
}

func init() { proto.RegisterFile("protocol.proto", fileDescriptor_2bc2336598a3f7e0) }

var fileDescriptor_2bc2336598a3f7e0 = []byte{
	// 130 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x4f, 0xce, 0xcf, 0xd1, 0x03, 0x33, 0x84, 0x38, 0x02, 0xa0, 0x7c, 0x25, 0x2d, 0x2e, 0x9e,
	0x90, 0xfc, 0xd2, 0xe4, 0x8c, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x1e, 0x2e, 0xc6,
	0x0a, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xc6, 0x20, 0xc6, 0x0a, 0x10, 0xaf, 0x52, 0x82, 0x09, 0xc2,
	0xab, 0x54, 0xd2, 0xe0, 0xe2, 0x82, 0xaa, 0x2d, 0xc8, 0xa9, 0xc4, 0xa7, 0xd2, 0xc8, 0x89, 0x8b,
	0xd3, 0x33, 0xaf, 0x24, 0xb5, 0x28, 0x2d, 0x31, 0x39, 0x55, 0xc8, 0x94, 0x8b, 0x15, 0xac, 0x4d,
	0x48, 0x4c, 0x0f, 0x66, 0xad, 0x1e, 0xb2, 0x9d, 0x52, 0x22, 0x18, 0xe2, 0x05, 0x39, 0x95, 0x49,
	0x6c, 0x60, 0xa7, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x94, 0x4d, 0x16, 0x47, 0xbc, 0x00,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InterfaceClient is the client API for Interface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InterfaceClient interface {
	Touch(ctx context.Context, in *TouchRequest, opts ...grpc.CallOption) (*TouchReply, error)
}

type interfaceClient struct {
	cc *grpc.ClientConn
}

func NewInterfaceClient(cc *grpc.ClientConn) InterfaceClient {
	return &interfaceClient{cc}
}

func (c *interfaceClient) Touch(ctx context.Context, in *TouchRequest, opts ...grpc.CallOption) (*TouchReply, error) {
	out := new(TouchReply)
	err := c.cc.Invoke(ctx, "/Protocol.Interface/Touch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InterfaceServer is the server API for Interface service.
type InterfaceServer interface {
	Touch(context.Context, *TouchRequest) (*TouchReply, error)
}

// UnimplementedInterfaceServer can be embedded to have forward compatible implementations.
type UnimplementedInterfaceServer struct {
}

func (*UnimplementedInterfaceServer) Touch(ctx context.Context, req *TouchRequest) (*TouchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Touch not implemented")
}

func RegisterInterfaceServer(s *grpc.Server, srv InterfaceServer) {
	s.RegisterService(&_Interface_serviceDesc, srv)
}

func _Interface_Touch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TouchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).Touch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Protocol.Interface/Touch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).Touch(ctx, req.(*TouchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Interface_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Protocol.Interface",
	HandlerType: (*InterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Touch",
			Handler:    _Interface_Touch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol.proto",
}
